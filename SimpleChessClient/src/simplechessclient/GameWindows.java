package simplechessclient;

import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javax.swing.GroupLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
/**
 * A class that contains windows that come up during the game
 * @author Jed Wang
 */
public class GameWindows {
    //<editor-fold defaultstate="collapsed" desc="TimeWindow class and show method">
    /**
     * A Window that contains the time control of the game.
     */
    protected static class TimeWindow extends JFrame {
        /**
         * Creates new form TimeWindow.
         * @param tc the TimeControl
         */
        public TimeWindow(TimeControl tc) {
            initComponents(tc);
        }
        
        /** This method is called from within the constructor to
         * initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        // <editor-fold defaultstate="collapsed" desc="Generated Code">
        private void initComponents(TimeControl tc) {
            jLabel = new JLabel();
            
            tc.addChangeListener(
                    (ChangeListener) (ObservableValue observable, Object oldValue, Object newValue) -> {
                        jLabel.setText(tc.toString());
                    });
            
            setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            setTitle("Timers");
            setResizable(false);
            
            jLabel.setFont(new Font("Segoe UI", 0, 48)); // NOI18N
            jLabel.setText("0:00.0|0:00.0");
            jLabel.setToolTipText("");
            
            GroupLayout layout = new GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel)
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel)
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            
            pack();
        }// </editor-fold>
        
        private JLabel jLabel;
    }
    
    /**
     * Creates and shows a TimeWindow
     * @param tc the TimeControl
     * @return the TimeWindow
     */
    public static JFrame showTimeWindow(TimeControl tc) {
        //<editor-fold defaultstate="collapsed" desc="Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            UIManager.LookAndFeelInfo[] installedLookAndFeels=UIManager.getInstalledLookAndFeels();
            for(UIManager.LookAndFeelInfo installedLookAndFeel : installedLookAndFeels) {
                if("Nimbus".equals(installedLookAndFeel.getName())) {
                    UIManager.setLookAndFeel(installedLookAndFeel.getClassName());
                    break;
                }
            }
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        JFrame frame = new GameWindows.TimeWindow(tc);
        frame.setSize(277, frame.getHeight());
        
        EventQueue.invokeLater(() -> {
            frame.setVisible(true);
        });
        
        System.out.println("(" + frame.getWidth() + ")");
        
        return frame;
    }
//</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="NameWindow class and show method">
    /**
     * A Window that displays the name of you or your opponent.
     */
    protected static class NameWindow extends JFrame {
        
        /**
         * Creates new form NameWindow
         * @param name the name of this player
         * @param isYou whether this player is you
         */
        public NameWindow(String name, boolean isYou) {
            initComponents(name, isYou);
        }
        
        /** This method is called from within the constructor to
         * initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        // <editor-fold defaultstate="collapsed" desc="Generated Code">
        private void initComponents(String name, boolean isYou) {
            nameLabel = new JLabel();
            isYouLabel = new JLabel();
            
            setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            setTitle("Name");
            setResizable(false);
            
            nameLabel.setFont(new Font("Segoe UI", 0, 48)); // NOI18N
            nameLabel.setText(name);
            nameLabel.setToolTipText("");
            
            isYouLabel.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
            isYouLabel.setText(isYou?"You:":"Opponent:");
            
            GroupLayout layout = new GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(isYouLabel)
                                            .addComponent(nameLabel))
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(isYouLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nameLabel)
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            
            pack();
        }// </editor-fold>
        
        // Variables declaration - do not modify
        private JLabel isYouLabel;
        private JLabel nameLabel;
        // End of variables declaration
    }
    
    /**
     * Creates and shows a TimeWindow
     * @param name the name of the player
     * @param isYou whether this player is you
     * @return the TimeWindow
     */
    public static JFrame showNameWindow(String name, boolean isYou) {
        //<editor-fold defaultstate="collapsed" desc="Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            UIManager.LookAndFeelInfo[] installedLookAndFeels=UIManager.getInstalledLookAndFeels();
            for(UIManager.LookAndFeelInfo installedLookAndFeel : installedLookAndFeels) {
                if("Nimbus".equals(installedLookAndFeel.getName())) {
                    UIManager.setLookAndFeel(installedLookAndFeel.getClassName());
                    break;
                }
            }
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        JFrame frame = new GameWindows.NameWindow(name, isYou);
        showBar(frame);
        
        EventQueue.invokeLater(() -> {
            frame.setVisible(true);
        });
        
        return frame;
    }
//</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="NameAndTimeWindow class and show method">
    /**
     * A Window that displays a name and a time.
     */
    protected static class NameAndTimeWindow extends JFrame {
        
        /**
         * Creates new form NameAndTimeWindow
         * @param name this player's name
         * @param isYou whether this player is you
         * @param tc the time control for this game
         * @param isWhite whether this player is using the white pieces
         */
        public NameAndTimeWindow(String name, boolean isYou, TimeControl tc, boolean isWhite) {
            initComponents(name, isYou, tc, isWhite);
        }
        
        /** This method is called from within the constructor to
         * initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        // <editor-fold defaultstate="collapsed" desc="Generated Code">
        private void initComponents(String name, boolean isYou, TimeControl tc, boolean isWhite) {
            
            isYouLabel = new JLabel();
            nameLabel = new JLabel();
            topSeparator = new JSeparator();
            timeLabel = new JLabel();
            bottomPanel = new JPanel();
            bottomSeparator = new JSeparator();
            graceLabel = new JLabel();
            
            tc.addChangeListener((ChangeListener) (ObservableValue observable, Object oldValue, Object newValue) -> {
                timeLabel.setText(tc.toString(!isWhite));
            });
            tc.addActionListener((ActionEvent e) -> {
                if(e.getActionCommand().startsWith("NOGRACE")) {
                    boolean noGrace = Boolean.parseBoolean(e.getActionCommand().substring(7));
                    if(noGrace != isWhite)
                        bottomPanel.setVisible(!bottomPanel.isVisible());
                }
            });
            
            setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            setTitle("Player Info");
            setResizable(false);
            
            isYouLabel.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
            isYouLabel.setText(isYou?"You:":"Opponent:");
            
            nameLabel.setFont(new Font("Segoe UI", 0, 36)); // NOI18N
            nameLabel.setText(name);
            nameLabel.setToolTipText(isYou?"Your name":"Your opponent\'s name");
            
            timeLabel.setFont(new Font("Consolas", 0, 36)); // NOI18N
            timeLabel.setText("0:00.0");
            timeLabel.setToolTipText(isYou?"Your time":"Your opponent\'s time");
            
            graceLabel.setFont(new Font("Segoe UI", 0, 11)); // NOI18N
            graceLabel.setHorizontalAlignment(SwingConstants.CENTER);
            graceLabel.setText("You have 15 seconds to make your first move.");
            graceLabel.setToolTipText("Grace time");
            
            GroupLayout jPanel1Layout = new GroupLayout(bottomPanel);
            bottomPanel.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                    jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(bottomSeparator)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(graceLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addContainerGap())
            );
            jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(bottomSeparator, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(graceLabel)
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            
            GroupLayout layout = new GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(topSeparator)
                            .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(isYouLabel)
                                            .addComponent(nameLabel)
                                            .addComponent(timeLabel))
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(bottomPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(isYouLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nameLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(topSeparator, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(timeLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(bottomPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            );
            
            pack();
        }// </editor-fold>
        
        /**
         * Sets the bottom panel to invisible
         */
        public void disableBottomPanel() {
            // bottomPanel.setVisible(false);
            bottomPanel.setOpaque(false);
        }
        
        // Variables declaration - do not modify
        private JLabel nameLabel;
        private JLabel isYouLabel;
        private JLabel timeLabel;
        private JLabel graceLabel;
        private JPanel bottomPanel;
        private JSeparator topSeparator;
        private JSeparator bottomSeparator;
        // End of variables declaration
    }
    
    /**
     * Creates and shows a NameAndTimeWindow
     * @param name the name of the player
     * @param isYou whether the player is you
     * @param tc the TimeControl instance of this game
     * @param isWhite whether this player is white
     * @return the NameAndTimeWindow
     */
    public static NameAndTimeWindow showNameAndTimeWindow(String name, boolean isYou, TimeControl tc, boolean isWhite) {
        //<editor-fold defaultstate="collapsed" desc="Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            UIManager.LookAndFeelInfo[] installedLookAndFeels=UIManager.getInstalledLookAndFeels();
            for(UIManager.LookAndFeelInfo installedLookAndFeel : installedLookAndFeels) {
                if("Nimbus".equals(installedLookAndFeel.getName())) {
                    UIManager.setLookAndFeel(installedLookAndFeel.getClassName());
                    break;
                }
            }
        } catch(ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NameAndTimeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        NameAndTimeWindow frame = new GameWindows.NameAndTimeWindow(name, isYou, tc, isWhite);
        showBar(frame);
        
        EventQueue.invokeLater(() -> {
            frame.setVisible(true);
        });
        
        return frame;
    }
//</editor-fold>
    
    /**
     * Reshapes a JFrame to show the bar and be able to drag it.
     * @param frame the JFrame to reshape
     */
    public static void showBar(JFrame frame) {
        if(frame.getWidth() < 220) {
            frame.setPreferredSize(new Dimension(220, 164));
            frame.setMinimumSize(new Dimension(220, 0));
            frame.setMaximumSize(new Dimension(220, frame.getHeight()));
        } else {
            frame.setPreferredSize(new Dimension(frame.getWidth(), 164));
            frame.setMinimumSize(new Dimension(frame.getWidth(), 0));
            frame.setMaximumSize(new Dimension(frame.getWidth(), frame.getHeight()));
        }
    }
}